// lib/main.dart

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
// Import your AuthProvider
import 'src/auth/auth_provider.dart'; // Adjust path as needed
import 'src/navigation/app_router.dart';
import 'src/services/chat_service.dart'; // Import ChatService
import 'src/chat/chat_provider.dart'; // Import ChatProvider
// Import your RootNavigator or initial app widget
// import 'package:orion_app/src/navigation/root_navigator.dart'; // Example

// Import Firebase options (generated by FlutterFire CLI)
import 'firebase_options.dart'; // Ensure this file exists and is configured

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const OrionApp());
}

class OrionApp extends StatefulWidget {
  const OrionApp({super.key});

  @override
  State<OrionApp> createState() => _OrionAppState();
}

class _OrionAppState extends State<OrionApp> {
  late final AuthProvider _authProvider;
  late final AppRouter _appRouter;
  late final ChatService _chatService;

  @override
  void initState() {
    super.initState();
    _authProvider = AuthProvider();
    _appRouter = AppRouter(authProvider: _authProvider);
  }

  @override
  void dispose() {
    _authProvider.dispose(); // Dispose the AuthProvider
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiProvider( // Use MultiProvider for multiple providers
      providers: [
        ChangeNotifierProvider<AuthProvider>.value(value: _authProvider),
        // Provide ChatProvider, it needs ChatService
        // Option 1: If ChatProvider takes ChatService in constructor
        ChangeNotifierProvider<ChatProvider>(
          create: (_) => ChatProvider(chatService: _chatService /*, authProvider: _authProvider (if needed)*/),
        ),
        // Option 2: Using ProxyProvider if ChatProvider needs AuthProvider updates
        // ChangeNotifierProxyProvider<AuthProvider, ChatProvider>(
        //   create: (context) => ChatProvider(
        //     chatService: _chatService,
        //     authProvider: Provider.of<AuthProvider>(context, listen: false),
        //   ),
        //   update: (context, auth, previousChatProvider) =>
        //       previousChatProvider!..updateAuthProvider(auth), // Requires updateAuthProvider method
        // ),
      ],
      child: Builder(
          builder: (context) {
            final router = _appRouter.router;
            return MaterialApp.router(
              title: 'Orion Calendar Assistant',
              theme: ThemeData(
                primarySwatch: Colors.blue,
                visualDensity: VisualDensity.adaptivePlatformDensity,
                useMaterial3: true,
              ),
              routerConfig: router,
              debugShowCheckedModeBanner: false,
            );
          }
      ),
    );
  }
}

// Placeholder widget to demonstrate consuming AuthProvider
// This logic will typically be in your RootNavigator (FE-TASK-7)
class AuthGate extends StatelessWidget {
  const AuthGate({super.key});

  @override
  Widget build(BuildContext context) {
    // Listen to AuthProvider
    final authProvider = Provider.of<AuthProvider>(context);

    if (authProvider.isLoading) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    if (authProvider.isAuthenticated) {
      // Replace with your main app screen/navigator
      return Scaffold(
        appBar: AppBar(title: const Text('Orion Main App')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Welcome, ${authProvider.currentUser?.displayName ?? authProvider.currentUser?.email ?? 'User'}!'),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () => authProvider.signOut(),
                child: const Text('Sign Out'),
              ),
            ],
          ),
        ),
      );
    } else {
      // Replace with your LoginScreen (FE-TASK-6)
      // For now, just a button to trigger login
      return Scaffold(
        appBar: AppBar(title: const Text('Orion Login')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              if (authProvider.errorMessage != null)
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text(authProvider.errorMessage!, style: const TextStyle(color: Colors.red)),
                ),
              ElevatedButton(
                onPressed: () => authProvider.signInWithGoogle(),
                child: const Text('Sign in with Google'),
              ),
            ],
          ),
        ),
      );
    }
  }
}
